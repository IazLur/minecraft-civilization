package TestJava.testjava.services;

import TestJava.testjava.TestJava;
import TestJava.testjava.models.BuildingModel;
import TestJava.testjava.models.BuildingDistanceConfig;
import TestJava.testjava.models.VillagerModel;
import TestJava.testjava.repositories.VillagerRepository;
import TestJava.testjava.enums.SocialClass;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Villager;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

/**
 * Service pour g√©rer l'attribution automatique des m√©tiers custom aux villageois inactifs
 * quand un nouveau b√¢timent custom est construit
 */
@SuppressWarnings("deprecation")
public class CustomJobAssignmentService {
    
    private static final int MAX_SEARCH_RADIUS = 256; // Rayon max de recherche de villageois
    
    /**
     * Trouve et attribue des employ√©s √† un nouveau b√¢timent custom
     * 
     * @param building Le b√¢timent qui a besoin d'employ√©s
     */
    public static void assignEmployeesToBuilding(BuildingModel building) {
        if (TestJava.world == null) {
            Bukkit.getLogger().warning("[CustomJobAssignment] Monde non disponible");
            return;
        }
        
        // Obtenir la configuration du b√¢timent
        BuildingDistanceConfig config = DistanceConfigService.getBuildingConfig(building.getBuildingType());
        if (config == null) {
            Bukkit.getLogger().warning("[CustomJobAssignment] Configuration manquante pour " + building.getBuildingType());
            return;
        }
        
        // Pour la bergerie : au moins 1 employ√© par niveau (mouton)
        int requiredEmployees = building.getLevel();
        if ("bergerie".equals(building.getBuildingType())) {
            requiredEmployees = Math.max(1, building.getLevel());
        }
        
        // Ne pas d√©passer le maximum configur√©
        requiredEmployees = Math.min(requiredEmployees, config.getNombreEmployesMax());
        
        Bukkit.getLogger().info("[CustomJobAssignment] Attribution de " + requiredEmployees + 
                               " employ√©s pour " + building.getBuildingType() + " " + building.getId());
        
        Location buildingLocation = new Location(TestJava.world, building.getX(), building.getY(), building.getZ());
        
        // 1. Trouver tous les villageois inactifs dans un rayon donn√©
        List<VillagerCandidate> inactiveVillagers = findInactiveVillagersNearby(buildingLocation);
        
        if (inactiveVillagers.isEmpty()) {
            Bukkit.getLogger().info("[CustomJobAssignment] Aucun villageois inactif trouv√© dans un rayon de " + 
                                   MAX_SEARCH_RADIUS + " blocs");
            return;
        }
        
        // 2. Trier par distance (le plus proche en premier)
        inactiveVillagers.sort(Comparator.comparingDouble(VillagerCandidate::getDistance));
        
        // 3. Attribuer les m√©tiers aux villageois les plus proches
        int assignedCount = 0;
        for (VillagerCandidate candidate : inactiveVillagers) {
            if (assignedCount >= requiredEmployees) {
                break;
            }
            
            if (assignCustomJobToVillager(candidate, building, config)) {
                assignedCount++;
            }
        }
        
        Bukkit.getLogger().info("[CustomJobAssignment] ‚úÖ " + assignedCount + "/" + requiredEmployees + 
                               " employ√©s attribu√©s pour " + building.getBuildingType());
    }
    
    /**
     * Trouve tous les villageois inactifs dans un rayon donn√©
     */
    private static List<VillagerCandidate> findInactiveVillagersNearby(Location center) {
        List<VillagerCandidate> candidates = new ArrayList<>();
        
        for (Entity entity : TestJava.world.getEntities()) {
            if (!(entity instanceof Villager villager)) {
                continue;
            }
            
            // V√©rifier la distance
            double distance = entity.getLocation().distance(center);
            if (distance > MAX_SEARCH_RADIUS) {
                continue;
            }
            
            // V√©rifier si le villageois est dans la base de donn√©es
            VillagerModel villagerModel = VillagerRepository.find(villager.getUniqueId());
            if (villagerModel == null) {
                continue;
            }
            
            // V√©rifier si le villageois est inactif, sans m√©tier ET sans m√©tier custom
            if (villagerModel.getSocialClassEnum() == SocialClass.INACTIVE && 
                villager.getProfession() == Villager.Profession.NONE &&
                !villagerModel.hasJob()) {
                
                candidates.add(new VillagerCandidate(villager, villagerModel, distance));
                
                Bukkit.getLogger().info("[CustomJobAssignment] Candidat trouv√©: " + villager.getUniqueId() + 
                                       " (distance: " + String.format("%.1f", distance) + ")");
            }
        }
        
        return candidates;
    }
    
    /**
     * Attribue un m√©tier custom √† un villageois
     */
    private static boolean assignCustomJobToVillager(VillagerCandidate candidate, BuildingModel building, 
                                                   BuildingDistanceConfig config) {
        Villager villager = candidate.getVillager();
        VillagerModel villagerModel = candidate.getVillagerModel();
        
        try {
            // T√©l√©porter le villageois pr√®s du b√¢timent
            Location buildingLocation = new Location(TestJava.world, building.getX(), building.getY() + 1, building.getZ());
            villager.teleport(buildingLocation);
            
            // Arr√™ter tout pathfinding en cours pour √©viter le retour au village d'origine
            villager.getPathfinder().stopPathfinding();
            
            // Attribuer le m√©tier custom dans la base de donn√©es
            villagerModel.assignCustomJob(building.getBuildingType(), building.getId());
            
            Bukkit.getLogger().info("[CustomJobAssignment] üìã M√©tier custom assign√©: " + building.getBuildingType() + 
                                   " √† villageois " + villager.getUniqueId() + 
                                   " (classe actuelle: " + villagerModel.getSocialClassEnum().getName() + ")");
            
            // Promotion vers classe ouvri√®re
            SocialClassService.promoteToWorkerOnJobAssignment(villagerModel);
            
            // √âquiper l'armure de cuir imm√©diatement et programmer une v√©rification
            CustomJobArmorService.equipLeatherArmor(villager);
            villagerModel.setHasLeatherArmor(true);
            
            // Programmer une v√©rification suppl√©mentaire de l'armure apr√®s 2 secondes
            CustomJobSynchronizationService.equipArmorOnJobAssignment(villagerModel);
            
            // Sauvegarder
            VillagerRepository.update(villagerModel);
            // MAJ du nom en temps r√©el (afficher le m√©tier custom)
            SocialClassService.updateVillagerDisplayName(villagerModel);
            
            // Message de confirmation
            String villagerName = extractVillagerName(villager);
            Bukkit.getServer().broadcastMessage(
                org.bukkit.ChatColor.AQUA + villagerName + 
                org.bukkit.ChatColor.WHITE + " travaille maintenant dans la " + 
                org.bukkit.ChatColor.YELLOW + building.getBuildingType() + 
                org.bukkit.ChatColor.WHITE + " (m√©tier custom)"
            );
            
            Bukkit.getLogger().info("[CustomJobAssignment] ‚úÖ M√©tier custom attribu√©: " + 
                                   building.getBuildingType() + " pour " + villager.getUniqueId());
            
            return true;
            
        } catch (Exception e) {
            Bukkit.getLogger().warning("[CustomJobAssignment] Erreur lors de l'attribution: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Retire le m√©tier custom d'un villageois (en cas de perte de classe sociale ou destruction du b√¢timent)
     */
    public static void removeCustomJobFromVillager(VillagerModel villagerModel) {
        try {
            // Trouver l'entit√© villageois
            Villager villager = (Villager) TestJava.plugin.getServer().getEntity(villagerModel.getId());
            if (villager == null) {
                Bukkit.getLogger().warning("[CustomJobAssignment] Villageois introuvable: " + villagerModel.getId());
                return;
            }
            
            Bukkit.getLogger().info("[CustomJobAssignment] üö´ Retrait m√©tier custom: " + villagerModel.getCurrentJobName() + 
                                   " pour villageois " + villager.getUniqueId() + 
                                   " (classe actuelle: " + villagerModel.getSocialClassEnum().getName() + ")");
            
            // Retirer l'armure de cuir
            if (villagerModel.hasLeatherArmor()) {
                CustomJobArmorService.removeLeatherArmor(villager);
            }
            
            // Nettoyer les donn√©es de m√©tier
            villagerModel.clearJob();
            
            // R√©trogradation vers inactive si √©tait ouvri√®re
            if (villagerModel.getSocialClassEnum() == SocialClass.OUVRIERE) {
                Bukkit.getLogger().info("[CustomJobAssignment] ‚¨áÔ∏è R√©trogradation Ouvri√®re ‚Üí Inactive suite perte m√©tier custom");
                SocialClassService.demoteToInactiveOnJobLoss(villagerModel);
            }
            
            // Sauvegarder
            VillagerRepository.update(villagerModel);
            // MAJ du nom en temps r√©el (m√©tier custom retir√©)
            SocialClassService.updateVillagerDisplayName(villagerModel);
            
            String villagerName = extractVillagerName(villager);
            Bukkit.getLogger().info("[CustomJobAssignment] ‚úÖ M√©tier custom retir√© pour " + villagerName);
            
        } catch (Exception e) {
            Bukkit.getLogger().warning("[CustomJobAssignment] Erreur lors du retrait du m√©tier: " + e.getMessage());
        }
    }
    
    /**
     * V√©rifie et ajuste le nombre d'employ√©s d'un b√¢timent selon ses besoins
     */
    public static void adjustBuildingEmployees(BuildingModel building) {
        if (!building.isActive()) {
            // B√¢timent inactif : retirer tous les employ√©s
            removeAllEmployeesFromBuilding(building);
            return;
        }
        
        // Compter les employ√©s actuels
        int currentEmployees = countBuildingEmployees(building);
        
        // Calculer le nombre requis (pour bergerie : 1 par niveau)
        int requiredEmployees = building.getLevel();
        if ("bergerie".equals(building.getBuildingType())) {
            requiredEmployees = Math.max(1, building.getLevel());
        }
        
        BuildingDistanceConfig config = DistanceConfigService.getBuildingConfig(building.getBuildingType());
        if (config != null) {
            requiredEmployees = Math.min(requiredEmployees, config.getNombreEmployesMax());
        }
        
        if (currentEmployees < requiredEmployees) {
            // Besoin de plus d'employ√©s
            Bukkit.getLogger().info("[CustomJobAssignment] Recrutement n√©cessaire pour " + building.getBuildingType() + 
                                   ": " + currentEmployees + "/" + requiredEmployees);
            assignEmployeesToBuilding(building);
        } else if (currentEmployees > requiredEmployees) {
            // Trop d'employ√©s : licencier les plus r√©cents
            removeExcessEmployees(building, currentEmployees - requiredEmployees);
        }
    }
    
    /**
     * Compte le nombre d'employ√©s actuels d'un b√¢timent
     */
    public static int countBuildingEmployees(BuildingModel building) {
        String query = String.format("/.[currentBuildingId='%s']", building.getId().toString());
        return TestJava.database.find(query, VillagerModel.class).size();
    }
    
    /**
     * Retire tous les employ√©s d'un b√¢timent
     */
    private static void removeAllEmployeesFromBuilding(BuildingModel building) {
        String query = String.format("/.[currentBuildingId='%s']", building.getId().toString());
        var employees = TestJava.database.find(query, VillagerModel.class);
        
        for (VillagerModel employee : employees) {
            removeCustomJobFromVillager(employee);
        }
        
        Bukkit.getLogger().info("[CustomJobAssignment] Tous les employ√©s retir√©s du " + building.getBuildingType());
    }
    
    /**
     * Retire un nombre donn√© d'employ√©s en exc√®s
     */
    private static void removeExcessEmployees(BuildingModel building, int excessCount) {
        String query = String.format("/.[currentBuildingId='%s']", building.getId().toString());
        var employees = TestJava.database.find(query, VillagerModel.class);
        
        int removed = 0;
        for (VillagerModel employee : employees) {
            if (removed >= excessCount) break;
            
            removeCustomJobFromVillager(employee);
            removed++;
        }
        
        Bukkit.getLogger().info("[CustomJobAssignment] " + removed + " employ√©s licenci√©s du " + building.getBuildingType());
    }
    
    /**
     * Extrait le nom du villageois depuis son nom personnalis√©
     */
    private static String extractVillagerName(Villager villager) {
        try {
            if (villager.getCustomName() != null) {
                String customName = villager.getCustomName();
                String cleanName = customName.replaceAll("¬ß[0-9a-fk-or]", ""); // Enl√®ve les codes couleur
                
                // Format: {X} [VillageName] Pr√©nom Nom
                int bracketEnd = cleanName.indexOf(']');
                if (bracketEnd != -1 && bracketEnd + 2 < cleanName.length()) {
                    return cleanName.substring(bracketEnd + 2); // +2 pour "] "
                }
            }
            return "Villageois " + villager.getUniqueId().toString().substring(0, 8);
        } catch (Exception e) {
            return "Villageois Inconnu";
        }
    }
    
    /**
     * Classe interne pour stocker les candidats villageois
     */
    private static class VillagerCandidate {
        private final Villager villager;
        private final VillagerModel villagerModel;
        private final double distance;
        
        public VillagerCandidate(Villager villager, VillagerModel villagerModel, double distance) {
            this.villager = villager;
            this.villagerModel = villagerModel;
            this.distance = distance;
        }
        
        public Villager getVillager() { return villager; }
        public VillagerModel getVillagerModel() { return villagerModel; }
        public double getDistance() { return distance; }
    }
}
