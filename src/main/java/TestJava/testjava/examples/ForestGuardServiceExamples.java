package TestJava.testjava.examples;

import TestJava.testjava.services.ForestGuardService;
import TestJava.testjava.models.VillagerModel;
import org.bukkit.entity.Villager;

/**
 * Exemples d'utilisation du ForestGuardService
 * 
 * Le ForestGuardService est automatiquement d√©clench√© toutes les 5 minutes
 * apr√®s le paiement des taxes dans le VillagerTaxThread.
 * 
 * Ce syst√®me permet aux gardes forestiers de planter automatiquement des arbres
 * autour de leur lieu de travail, cr√©ant des for√™ts progressivement.
 */
public class ForestGuardServiceExamples {
    
    /**
     * EXEMPLE 1: D√©clenchement Automatique
     * 
     * Le ForestGuardService est automatiquement d√©clench√© toutes les 5 minutes
     * via le VillagerTaxThread -> TaxService.collectTaxes()
     * 
     * Workflow automatique:
     * 1. VillagerTaxThread s'ex√©cute (toutes les 5 minutes)
     * 2. TaxService.collectTaxes() traite tous les villageois
     * 3. Pour chaque garde forestier: paiement salaire + collecte taxes
     * 4. D√©clenchement automatique: ForestGuardService.triggerTreePlantingAfterSalary()
     * 5. Le garde se d√©place vers son b√¢timent
     * 6. Recherche d'un endroit libre pour planter
     * 7. D√©placement vers l'endroit de plantation
     * 8. Plantation du sapling + croissance magique apr√®s 3 secondes
     */
    public static void exempleDeDeClenchementAutomatique() {
        /*
         * LE CODE CI-DESSOUS EST PUREMENT INFORMATIF
         * Le syst√®me fonctionne automatiquement sans intervention manuelle
         */
        
        // Dans TaxService.collectTaxes(), cette logique s'ex√©cute automatiquement:
        /*
        if (villager.hasCustomJob()) {
            String customJobName = villager.getCurrentJobName();
            
            if ("garde forestier".equals(customJobName)) {
                ForestGuardService.triggerTreePlantingAfterSalary(villager, entity);
            }
        }
        */
    }
    
    /**
     * EXEMPLE 2: D√©clenchement Manuel (pour tests ou cas sp√©ciaux)
     * 
     * Si vous voulez d√©clencher manuellement la plantation d'arbres
     * par un garde forestier (par exemple dans une commande admin)
     */
    public static void exempleDeDeClenchementManuel(VillagerModel villagerModel, Villager villagerEntity) {
        // V√©rifier que c'est bien un garde forestier
        if (villagerModel.hasCustomJob() && "garde forestier".equals(villagerModel.getCurrentJobName())) {
            
            // D√©clencher manuellement la plantation
            ForestGuardService.triggerTreePlantingAfterSalary(villagerModel, villagerEntity);
            
            // Messages informatifs
            System.out.println("üå≤ Plantation d'arbre d√©clench√©e manuellement pour le garde forestier: " + 
                             villagerModel.getId());
        } else {
            System.out.println("‚ùå Ce villageois n'est pas un garde forestier");
        }
    }
    
    /**
     * EXEMPLE 3: Configuration et Fonctionnement
     * 
     * Le garde forestier utilise la configuration d√©finie dans metiers_custom.json:
     */
    public static void exempleDeConfiguration() {
        /*
         * Configuration dans metiers_custom.json:
         * {
         *   "buildingType": "garde forestier",
         *   "distanceMin": 77,
         *   "distanceMax": 128,
         *   "description": "Garde forestier pour g√©n√©rer une for√™t",
         *   "costToBuild": 500,
         *   "costPerDay": 10,
         *   "costPerUpgrade": 100,
         *   "costUpgradeMultiplier": 1.2,
         *   "nombreEmployesMax": 3,
         *   "salaireEmploye": 12,
         *   "tauxTaxeEmploye": 0.25
         * }
         * 
         * Cela signifie:
         * - Salaire: 12¬µ toutes les 5 minutes
         * - Imp√¥t: 25% (3¬µ collect√©s)
         * - Revenu net pour le garde: 9¬µ
         * - Maximum 3 gardes par b√¢timent
         * - Co√ªt de construction: 500¬µ
         * - Co√ªt d'entretien: 10¬µ toutes les 4 minutes
         */
    }
    
    /**
     * EXEMPLE 4: Cycle de Vie Complet d'un Garde Forestier
     */
    public static void exempleDeCycleDeVie() {
        /*
         * 1. CONSTRUCTION DU B√ÇTIMENT
         * - Joueur utilise: /build garde forestier
         * - Co√ªt: 500¬µ d√©duits de l'empire
         * - B√¢timent cr√©√© avec BuildingModel dans la base
         * 
         * 2. ASSIGNATION AUTOMATIQUE D'EMPLOY√âS
         * - AutomaticJobAssignmentThread trouve des villageois inactifs
         * - Assigne automatiquement jusqu'√† 3 gardes forestiers
         * - Chaque garde re√ßoit l'armure de cuir
         * 
         * 3. CYCLE DE TRAVAIL (toutes les 5 minutes)
         * - VillagerTaxThread s'ex√©cute
         * - Chaque garde forestier:
         *   a) Re√ßoit 12¬µ de salaire
         *   b) Paie 3¬µ d'imp√¥ts (25%)
         *   c) D√©clenche ForestGuardService.triggerTreePlantingAfterSalary()
         *   d) Se d√©place vers le b√¢timent garde forestier
         *   e) Cherche un endroit libre dans un rayon de 50 blocs
         *   f) Se d√©place vers l'endroit de plantation
         *   g) Plante un sapling al√©atoire (ch√™ne, bouleau, √©pic√©a, etc.)
         *   h) Attend 3 secondes puis fait pousser l'arbre magiquement
         * 
         * 4. ENTRETIEN DU B√ÇTIMENT
         * - DailyBuildingCostThread (toutes les 4 minutes)
         * - Co√ªt: 10¬µ d√©duits de l'empire du propri√©taire
         * - Si l'empire n'a pas assez: b√¢timent d√©sactiv√©
         * 
         * 5. MAINTENANCE DES EMPLOY√âS
         * - CustomJobMaintenanceThread (toutes les 7 minutes)
         * - V√©rifie que les gardes portent leur armure de cuir
         * - Ajuste le nombre d'employ√©s selon les besoins
         * - Nettoie les incoh√©rences
         */
    }
    
    /**
     * EXEMPLE 5: Types d'Arbres et Probabilit√©s
     */
    public static void exempleDeTypesDArbres() {
        /*
         * Le ForestGuardService plante des arbres selon ces probabilit√©s:
         * 
         * - Ch√™ne (Oak): 30% - Le plus commun
         * - Bouleau (Birch): 25% - Commun  
         * - √âpic√©a (Spruce): 20% - Commun
         * - Jungle: 10% - Peu commun
         * - Acacia: 8% - Peu commun
         * - Ch√™ne Noir (Dark Oak): 5% - Rare
         * - Cerisier (Cherry): 2% - Tr√®s rare
         * 
         * Ces probabilit√©s cr√©ent une diversit√© naturelle dans les for√™ts g√©n√©r√©es
         * tout en favorisant les types d'arbres les plus communs.
         */
    }
    
    /**
     * EXEMPLE 6: Messages et Notifications
     */
    public static void exempleDeMessages() {
        /*
         * Le syst√®me affiche automatiquement des messages sur le serveur:
         * 
         * PLANTATION:
         * "üå± [Nom du Garde] a plant√© un ch√™ne qui va bient√¥t pousser..."
         * 
         * CROISSANCE R√âUSSIE:
         * "üå≥‚ú® [Nom du Garde] a fait pousser un magnifique ch√™ne par magie !"
         * 
         * √âCHECS:
         * "üå≤ [Nom du Garde] n'a pas pu rejoindre son poste de garde forestier"
         * "üå≤ [Nom du Garde] ne trouve pas d'endroit libre pour planter un arbre"
         * "üå≤ [Nom du Garde] n'a pas pu atteindre l'endroit de plantation"
         * 
         * Ces messages permettent aux joueurs de suivre l'activit√© des gardes forestiers
         * et de comprendre pourquoi une plantation pourrait √©chouer.
         */
    }
    
    /**
     * EXEMPLE 7: Optimisation et Performance
     */
    public static void exempleOptimisation() {
        /*
         * Le ForestGuardService est optimis√© pour les performances:
         * 
         * 1. RECHERCHE D'EMPLACEMENT INTELLIGENTE:
         * - √âvite les zones d√©j√† bois√©es (rayon 8 blocs)
         * - V√©rifie le type de sol adapt√©
         * - Limite la recherche √† 50 blocs du b√¢timent
         * 
         * 2. D√âPLACEMENTS FIABLES:
         * - Utilise VillagerMovementManager pour √©viter les blocages
         * - Timeout automatique (60s lieu de travail, 45s plantation)
         * - Retry automatique en cas d'√©chec de pathfinding
         * 
         * 3. CROISSANCE OPTIMIS√âE:
         * - Utilise d'abord Minecraft native (applyBoneMeal)
         * - Fallback manuel uniquement si n√©cessaire
         * - Construction d'arbre simple (4-6 blocs + feuilles)
         * 
         * 4. GESTION D'ERREURS:
         * - Try-catch pour chaque √©tape critique
         * - Logs d√©taill√©s pour le debugging
         * - Pas de crash en cas d'erreur inattendue
         */
    }
}
