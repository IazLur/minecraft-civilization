package TestJava.testjava.threads;

import TestJava.testjava.listeners.SocialClassJobListener;
import TestJava.testjava.models.VillagerModel;
import TestJava.testjava.repositories.VillagerRepository;
import TestJava.testjava.services.SocialClassService;
import org.bukkit.Bukkit;

import java.util.Collection;

/**
 * Thread qui s'ex√©cute p√©riodiquement pour enforcer les r√®gles de classes sociales
 * - Retire les m√©tiers des villageois classe 0
 * - Met √† jour les noms d'affichage si n√©cessaire
 * - V√©rifie la coh√©rence du syst√®me
 */
public class SocialClassEnforcementThread implements Runnable {

    @Override
    public void run() {
        try {
            Bukkit.getLogger().info("[SocialClassEnforcement] D√©marrage de la v√©rification p√©riodique...");
            
            // Enforce les restrictions de m√©tier
            SocialClassJobListener.enforceJobRestrictions();
            
            // CORRECTION BUG: V√©rification suppl√©mentaire des villageois mis√©rables avec m√©tier
            enforceStrictJobRestrictions();
            
            // Met √† jour les noms d'affichage pour tous les villageois
            updateAllVillagerDisplayNames();
            
            // V√©rifie la coh√©rence des classes sociales
            validateSocialClassConsistency();
            
            Bukkit.getLogger().info("[SocialClassEnforcement] V√©rification termin√©e.");
            
        } catch (Exception e) {
            Bukkit.getLogger().severe("[SocialClassEnforcement] Erreur lors de l'enforcement: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Met √† jour les noms d'affichage de tous les villageois
     */
    private void updateAllVillagerDisplayNames() {
        Collection<VillagerModel> villagers = VillagerRepository.getAll();
        int updated = 0;
        
        for (VillagerModel villager : villagers) {
            try {
                SocialClassService.updateVillagerDisplayName(villager);
                updated++;
            } catch (Exception e) {
                Bukkit.getLogger().warning("[SocialClassEnforcement] Erreur mise √† jour nom villageois " + 
                                         villager.getId() + ": " + e.getMessage());
            }
        }
        
        if (updated > 0) {
            Bukkit.getLogger().info("[SocialClassEnforcement] " + updated + " noms de villageois mis √† jour");
        }
    }
    
    /**
     * V√©rifie la coh√©rence des classes sociales et corrige si n√©cessaire
     */
    private void validateSocialClassConsistency() {
        Collection<VillagerModel> villagers = VillagerRepository.getAll();
        int corrected = 0;
        
        for (VillagerModel villager : villagers) {
            try {
                // S'assure que tous les villageois ont une classe sociale d√©finie
                if (villager.getSocialClass() == null) {
                    villager.setSocialClass(0); // Mis√©rable par d√©faut
                    VillagerRepository.update(villager);
                    corrected++;
                    Bukkit.getLogger().info("[SocialClassEnforcement] Classe sociale assign√©e par d√©faut √† " + villager.getId());
                }
                
                // R√©√©value la classe sociale bas√©e sur la nourriture actuelle
                SocialClassService.evaluateAndUpdateSocialClass(villager);
                
            } catch (Exception e) {
                Bukkit.getLogger().warning("[SocialClassEnforcement] Erreur validation villageois " + 
                                         villager.getId() + ": " + e.getMessage());
            }
        }
        
        if (corrected > 0) {
            Bukkit.getLogger().info("[SocialClassEnforcement] " + corrected + " classes sociales corrig√©es");
        }
    }
    
    /**
     * V√©rification stricte pour d√©tecter et corriger les villageois mis√©rables avec m√©tier
     */
    private void enforceStrictJobRestrictions() {
        Collection<VillagerModel> villagers = VillagerRepository.getAll();
        int violationsFixed = 0;
        
        for (VillagerModel villager : villagers) {
            try {
                if (!SocialClassService.canVillagerHaveJob(villager)) {
                    // V√©rifier si ce villageois mis√©rable a encore un m√©tier
                    org.bukkit.entity.Entity entity = org.bukkit.Bukkit.getServer().getEntity(villager.getId());
                    if (entity instanceof org.bukkit.entity.Villager bukkitVillager) {
                        if (bukkitVillager.getProfession() != org.bukkit.entity.Villager.Profession.NONE) {
                            Bukkit.getLogger().severe("[SocialClassEnforcement] üö® VIOLATION D√âTECT√âE: Villageois mis√©rable " + 
                                                    villager.getId() + " a le m√©tier " + bukkitVillager.getProfession());
                            
                            bukkitVillager.setProfession(org.bukkit.entity.Villager.Profession.NONE);
                            bukkitVillager.getPathfinder().stopPathfinding();
                            violationsFixed++;
                            
                            Bukkit.getLogger().info("[SocialClassEnforcement] ‚úÖ Violation corrig√©e pour " + villager.getId());
                        }
                    }
                }
            } catch (Exception e) {
                Bukkit.getLogger().warning("[SocialClassEnforcement] Erreur v√©rification stricte pour " + 
                                         villager.getId() + ": " + e.getMessage());
            }
        }
        
        if (violationsFixed > 0) {
            Bukkit.getLogger().warning("[SocialClassEnforcement] üîß " + violationsFixed + " violations de m√©tier corrig√©es");
        }
    }
}